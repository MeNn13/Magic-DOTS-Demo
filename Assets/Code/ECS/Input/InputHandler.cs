//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/ECS/Input/InputHandler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputHandler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputHandler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputHandler"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""0ec2fda8-3054-4b5e-97b3-30bd525a3306"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0030be99-475a-4f06-a142-436c8798259e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""f63d66c4-6b81-470e-b353-407ca822efb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pyro Skill"",
                    ""type"": ""Button"",
                    ""id"": ""b458b5ed-85e7-4c1f-9c86-b3cca77d947a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hydro Skill"",
                    ""type"": ""Button"",
                    ""id"": ""f61a242c-972f-4471-bd6f-0f2855cd5978"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vento Skill"",
                    ""type"": ""Button"",
                    ""id"": ""36518133-7eb3-4d20-8e91-01048843d484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Geo Skill"",
                    ""type"": ""Button"",
                    ""id"": ""3b87bc3f-1107-4ba0-b6cc-e95181221c57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a2c781db-3a3c-4a2d-9364-d9babddc391b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""db612af6-bb41-45dc-83f7-4b9fcc57e5c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""adbcf76f-1d84-4cd8-a64e-bcac22ac93a4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eda464e1-8e77-4054-9cb5-173257a47fdc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""109d20bb-0e74-4bc5-a8aa-e181317e721e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3b3d0258-1914-4d77-820b-ef7ba6f6ef08"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf3edbb3-c06d-4f59-9a69-0df6950563b6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pyro Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4431c224-d1db-4c91-9316-df7667bb6da9"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hydro Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66dc4d4c-347d-4d0c-adf3-57b0cba703f8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vento Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51aff1c2-1e8a-4470-838b-3019c65557f9"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Geo Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
        m_Character_Attack = m_Character.FindAction("Attack", throwIfNotFound: true);
        m_Character_PyroSkill = m_Character.FindAction("Pyro Skill", throwIfNotFound: true);
        m_Character_HydroSkill = m_Character.FindAction("Hydro Skill", throwIfNotFound: true);
        m_Character_VentoSkill = m_Character.FindAction("Vento Skill", throwIfNotFound: true);
        m_Character_GeoSkill = m_Character.FindAction("Geo Skill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Move;
    private readonly InputAction m_Character_Attack;
    private readonly InputAction m_Character_PyroSkill;
    private readonly InputAction m_Character_HydroSkill;
    private readonly InputAction m_Character_VentoSkill;
    private readonly InputAction m_Character_GeoSkill;
    public struct CharacterActions
    {
        private @InputHandler m_Wrapper;
        public CharacterActions(@InputHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Character_Move;
        public InputAction @Attack => m_Wrapper.m_Character_Attack;
        public InputAction @PyroSkill => m_Wrapper.m_Character_PyroSkill;
        public InputAction @HydroSkill => m_Wrapper.m_Character_HydroSkill;
        public InputAction @VentoSkill => m_Wrapper.m_Character_VentoSkill;
        public InputAction @GeoSkill => m_Wrapper.m_Character_GeoSkill;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @PyroSkill.started += instance.OnPyroSkill;
            @PyroSkill.performed += instance.OnPyroSkill;
            @PyroSkill.canceled += instance.OnPyroSkill;
            @HydroSkill.started += instance.OnHydroSkill;
            @HydroSkill.performed += instance.OnHydroSkill;
            @HydroSkill.canceled += instance.OnHydroSkill;
            @VentoSkill.started += instance.OnVentoSkill;
            @VentoSkill.performed += instance.OnVentoSkill;
            @VentoSkill.canceled += instance.OnVentoSkill;
            @GeoSkill.started += instance.OnGeoSkill;
            @GeoSkill.performed += instance.OnGeoSkill;
            @GeoSkill.canceled += instance.OnGeoSkill;
        }

        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @PyroSkill.started -= instance.OnPyroSkill;
            @PyroSkill.performed -= instance.OnPyroSkill;
            @PyroSkill.canceled -= instance.OnPyroSkill;
            @HydroSkill.started -= instance.OnHydroSkill;
            @HydroSkill.performed -= instance.OnHydroSkill;
            @HydroSkill.canceled -= instance.OnHydroSkill;
            @VentoSkill.started -= instance.OnVentoSkill;
            @VentoSkill.performed -= instance.OnVentoSkill;
            @VentoSkill.canceled -= instance.OnVentoSkill;
            @GeoSkill.started -= instance.OnGeoSkill;
            @GeoSkill.performed -= instance.OnGeoSkill;
            @GeoSkill.canceled -= instance.OnGeoSkill;
        }

        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    public interface ICharacterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPyroSkill(InputAction.CallbackContext context);
        void OnHydroSkill(InputAction.CallbackContext context);
        void OnVentoSkill(InputAction.CallbackContext context);
        void OnGeoSkill(InputAction.CallbackContext context);
    }
}
